[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shared.database",
        "description": "shared.database",
        "isExtraImport": true,
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "ContaPagarReceber",
        "importPath": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "description": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "isExtraImport": true,
        "detail": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "documentation": {}
    },
    {
        "label": "ContaPagarReceber",
        "importPath": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "description": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "isExtraImport": true,
        "detail": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "documentation": {}
    },
    {
        "label": "FornecedorCliente",
        "importPath": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "description": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "isExtraImport": true,
        "detail": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "documentation": {}
    },
    {
        "label": "FornecedorCliente",
        "importPath": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "description": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "isExtraImport": true,
        "detail": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "isExtraImport": true,
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "isExtraImport": true,
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "isExtraImport": true,
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "isExtraImport": true,
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "contas_a_pagar_e_receber_router",
        "importPath": "contas_a_pagar_e_receber.routers",
        "description": "contas_a_pagar_e_receber.routers",
        "isExtraImport": true,
        "detail": "contas_a_pagar_e_receber.routers",
        "documentation": {}
    },
    {
        "label": "fornecedor_cliente_router",
        "importPath": "contas_a_pagar_e_receber.routers",
        "description": "contas_a_pagar_e_receber.routers",
        "isExtraImport": true,
        "detail": "contas_a_pagar_e_receber.routers",
        "documentation": {}
    },
    {
        "label": "not_found_handler",
        "importPath": "shared.exceptions_handler",
        "description": "shared.exceptions_handler",
        "isExtraImport": true,
        "detail": "shared.exceptions_handler",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.5df8ac334ac0_tabela_de_contas_a_pagar_e_receber",
        "description": "alembic.versions.5df8ac334ac0_tabela_de_contas_a_pagar_e_receber",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('contas_a_pagar_e_receber',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('desc', sa.String(length=30), nullable=True),\n    sa.Column('valor', sa.Numeric(), nullable=True),\n    sa.Column('tipo', sa.String(length=30), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5df8ac334ac0_tabela_de_contas_a_pagar_e_receber",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.5df8ac334ac0_tabela_de_contas_a_pagar_e_receber",
        "description": "alembic.versions.5df8ac334ac0_tabela_de_contas_a_pagar_e_receber",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('contas_a_pagar_e_receber')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5df8ac334ac0_tabela_de_contas_a_pagar_e_receber",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.d28ecb421854_criar_tabela_de_cliente",
        "description": "alembic.versions.d28ecb421854_criar_tabela_de_cliente",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('fornecedor_cliente',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('nome', sa.String(length=255), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "alembic.versions.d28ecb421854_criar_tabela_de_cliente",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.d28ecb421854_criar_tabela_de_cliente",
        "description": "alembic.versions.d28ecb421854_criar_tabela_de_cliente",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('fornecedor_cliente')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.d28ecb421854_criar_tabela_de_cliente",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "ContaPagarReceber",
        "kind": 6,
        "importPath": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "description": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "peekOfCode": "class ContaPagarReceber(Base):\n    __tablename__ = \"contas_a_pagar_e_receber\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    desc = Column(String(30))\n    valor = Column(Numeric)\n    tipo = Column(String(30))",
        "detail": "contas_a_pagar_e_receber.models.conta_a_pagar_receber_model",
        "documentation": {}
    },
    {
        "label": "FornecedorCliente",
        "kind": 6,
        "importPath": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "description": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "peekOfCode": "class FornecedorCliente(Base):\n    __tablename__ = \"fornecedor_cliente\"\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    nome = Column(String(255))",
        "detail": "contas_a_pagar_e_receber.models.fornecedor_cliente_model",
        "documentation": {}
    },
    {
        "label": "ContaPagarReceberResponse",
        "kind": 6,
        "importPath": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "description": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "peekOfCode": "class ContaPagarReceberResponse(BaseModel):\n    id: int\n    desc: str\n    valor: Decimal\n    tipo: str\n    class Config:\n        from_attributes = True\nclass ContaPagarReceberRequest(BaseModel):\n    desc: str\n    valor: Decimal",
        "detail": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "ContaPagarReceberRequest",
        "kind": 6,
        "importPath": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "description": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "peekOfCode": "class ContaPagarReceberRequest(BaseModel):\n    desc: str\n    valor: Decimal\n    tipo: str\n@router.get(\"/\", response_model=List[ContaPagarReceberResponse], status_code=200)\nasync def listar_contas(db: Session = Depends(get_db)) -> List[ContaPagarReceberResponse]:\n    return db.query(ContaPagarReceber).all()\n@router.get(\"/{id_contar_pagar_receber}\", response_model=ContaPagarReceberResponse, status_code=200)\nasync def obter_uma_conta(id_conta_pagar_receber: int, db:Session=Depends(get_db)) -> ContaPagarReceberResponse:\n    conta_pagar_receber = busca_conta_por_id(id_conta_pagar_receber, db)",
        "detail": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "busca_conta_por_id",
        "kind": 2,
        "importPath": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "description": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "peekOfCode": "def busca_conta_por_id(id: int, db: Session) -> ContaPagarReceber:\n    conta_pagar_receber = db.query(ContaPagarReceber).get(id)\n    if conta_pagar_receber is None:\n        raise NotFound(\"Conta a pagar e receber\")\n    return conta_pagar_receber",
        "detail": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "description": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "peekOfCode": "router = APIRouter(prefix=\"/contas-a-pagar-e-receber\")\nclass ContaPagarReceberResponse(BaseModel):\n    id: int\n    desc: str\n    valor: Decimal\n    tipo: str\n    class Config:\n        from_attributes = True\nclass ContaPagarReceberRequest(BaseModel):\n    desc: str",
        "detail": "contas_a_pagar_e_receber.routers.contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "FornecedorClienteResponse",
        "kind": 6,
        "importPath": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "description": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "peekOfCode": "class FornecedorClienteResponse(BaseModel):\n    id: int\n    nome: str\n    class Config:\n        from_attributes = True\nclass FornecedorClienteRequest(BaseModel):\n    nome: str\n@router.get(\"/\", response_model=List[FornecedorClienteResponse], status_code=200)\nasync def listar_fornecedores(db: Session = Depends(get_db)) -> List[FornecedorClienteResponse]:\n    return db.query(FornecedorCliente).all()",
        "detail": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "documentation": {}
    },
    {
        "label": "FornecedorClienteRequest",
        "kind": 6,
        "importPath": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "description": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "peekOfCode": "class FornecedorClienteRequest(BaseModel):\n    nome: str\n@router.get(\"/\", response_model=List[FornecedorClienteResponse], status_code=200)\nasync def listar_fornecedores(db: Session = Depends(get_db)) -> List[FornecedorClienteResponse]:\n    return db.query(FornecedorCliente).all()\n@router.get(\"/{id_fornecedor_cliente}\", response_model=FornecedorClienteResponse, status_code=200)\nasync def obter_um_fornecedor(id_fornecedor: int, db:Session=Depends(get_db)) -> FornecedorClienteResponse:\n    fornecedor_cliente = busca_fornecedor_por_id(id_fornecedor, db)\n    return fornecedor_cliente\n@router.post(\"\", response_model=FornecedorClienteResponse, status_code=201)",
        "detail": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "documentation": {}
    },
    {
        "label": "busca_fornecedor_por_id",
        "kind": 2,
        "importPath": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "description": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "peekOfCode": "def busca_fornecedor_por_id(id: int, db: Session) -> FornecedorCliente:\n    fornecedor_cliente = db.query(FornecedorCliente).get(id)\n    if fornecedor_cliente is None:\n        raise NotFound(\"Fornecedor\")\n    return fornecedor_cliente",
        "detail": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "description": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "peekOfCode": "router = APIRouter(prefix=\"/fornecedor-cliente\")\nclass FornecedorClienteResponse(BaseModel):\n    id: int\n    nome: str\n    class Config:\n        from_attributes = True\nclass FornecedorClienteRequest(BaseModel):\n    nome: str\n@router.get(\"/\", response_model=List[FornecedorClienteResponse], status_code=200)\nasync def listar_fornecedores(db: Session = Depends(get_db)) -> List[FornecedorClienteResponse]:",
        "detail": "contas_a_pagar_e_receber.routers.fornecedor_cliente_router",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "fast-api-deploy-venv.bin.activate_this",
        "description": "fast-api-deploy-venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "fast-api-deploy-venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "#SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "#SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\nSQLALCHEMY_DATABASE_URL = \"postgresql://postgres:senha123@localhost/postgres\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"postgresql://postgres:senha123@localhost/postgres\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "shared.database",
        "description": "shared.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "shared.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "shared.dependencies",
        "description": "shared.dependencies",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "shared.dependencies",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "kind": 6,
        "importPath": "shared.exceptions",
        "description": "shared.exceptions",
        "peekOfCode": "class NotFound(Exception):\n    def __init__(self, name:str):\n        self.name = name",
        "detail": "shared.exceptions",
        "documentation": {}
    },
    {
        "label": "override_get_db",
        "kind": 2,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "def override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\napp.dependency_overrides[get_db] = override_get_db\ndef test_dev_listar_contas_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "test_dev_listar_contas_a_pagar_e_receber",
        "kind": 2,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "def test_dev_listar_contas_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n    client.get(\"/contas-a-pagar-e-receber\", json={\"desc\":\"Aluguel\", \"valor\": 1000, \"tipo\":\"pagar\"})\n    response = client.get(\"/contas-a-pagar-e-receber\")\n    assert response.status_code == 200\n    # assert response.json() == []\ndef test_dev_criar_conta_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "test_dev_criar_conta_a_pagar_e_receber",
        "kind": 2,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "def test_dev_criar_conta_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n    client.post(\"/contas-a-pagar-e-receber\")\n    nova_conta = {\n        \"desc\": \"Curso Python\",\n        \"valor\": 123,\n        \"tipo\": \"pagar\",\n    }\n    nova_conta_copy = nova_conta.copy()",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "test_dev_retornar_erro_excedido_descricao",
        "kind": 2,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "def test_dev_retornar_erro_excedido_descricao():\n    response = client.post(\"/contas-a-pagar-e-receber\", json={\n        \"desc\": \"Desc teste deve retornar\",\n        \"valor\": 12321,\n        \"tipo\": \"Pagar\"\n    })\ndef test_dev_atualizar_conta_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n    response_put = client.post(\"/contas-a-pagar-e-receber\", json={",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "test_dev_atualizar_conta_a_pagar_e_receber",
        "kind": 2,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "def test_dev_atualizar_conta_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n    response_put = client.post(\"/contas-a-pagar-e-receber\", json={\n        \"desc\": \"Curso de python\",\n        \"valor\": 123,\n        \"tipo\": \"pagar\"\n    })\n    id_conta_pagar_receber = response_put.json()['id']\n    client.put(f\"/contas-a-pagar-e-receber/{id_conta_pagar_receber}\", json={",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "test_dev_remover_conta_a_pagar_e_receber",
        "kind": 2,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "def test_dev_remover_conta_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n    response_put = client.post(\"/contas-a-pagar-e-receber\", json={\n        \"desc\": \"Curso de python\",\n        \"valor\": 123,\n        \"tipo\": \"pagar\"\n    })\n    id_conta_pagar_receber = response_put.json()['id']\n    client.delete(f\"/contas-a-pagar-e-receber/{id_conta_pagar_receber}\")",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "client = TestClient(app)\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "TestingSessionLocal",
        "kind": 5,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\napp.dependency_overrides[get_db] = override_get_db\ndef test_dev_listar_contas_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_db]",
        "kind": 5,
        "importPath": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "description": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "peekOfCode": "app.dependency_overrides[get_db] = override_get_db\ndef test_dev_listar_contas_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)\n    Base.metadata.create_all(bind=engine)\n    client.get(\"/contas-a-pagar-e-receber\", json={\"desc\":\"Aluguel\", \"valor\": 1000, \"tipo\":\"pagar\"})\n    response = client.get(\"/contas-a-pagar-e-receber\")\n    assert response.status_code == 200\n    # assert response.json() == []\ndef test_dev_criar_conta_a_pagar_e_receber():\n    Base.metadata.drop_all(bind=engine)",
        "detail": "test.contas_a_pagar_e_receber.routers.test_integrado_contas_a_pagar_e_receber_router",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(contas_a_pagar_e_receber_router.router)\napp.include_router(fornecedor_cliente_router.router)\napp.add_exception_handler(NotFound, not_found_handler)",
        "detail": "main",
        "documentation": {}
    }
]